---
# Set PostgreSQL type
# pg - Community PostgreSQL (default)
# edb - EnterpriseDB PostgreSQL Advanced Server
pg_type: pg

# Set major version of PostgreSQL
pg_major_version: 12

# Create a master or standby PostgreSQL instance
pg_cluster_type: master

# PostgreSQL Development Group Yum repository
pg_repo_url: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
pg_enablerepo: "pgdg12"

# Packages to install for PostgreSQL
pg_packages:
  - postgresql{{ pg_major_version }}-server
  - postgresql{{ pg_major_version }}-contrib
  - postgresql{{ pg_major_version }}-libs
  - postgresql{{ pg_major_version }}
  - pg_top

# Package for Python to administer PostgreSQL
pg_python_libraries:
  - python-psycopg2
  - python-passlib

# PostgreSQL OS user and group
pg_user: postgres
pg_user_password: postgres
pg_group: postgres

# PostgreSQL database cluster superuser
pg_superuser: postgres
pg_superuser_password: postgres

# Required & optional directories
pg_user_home: "/var/lib/pgsql"
pg_data_dir: "/var/lib/pgsql/{{ pg_major_version }}/data"
pg_bin_path: "/usr/pgsql-{{ pg_major_version }}/bin"

# Unix socket domain directories
pg_unix_socket_directories:
  - "/var/run/postgresql"
  - "/tmp/postgresql"

# Create optional directories
pg_custom_dirs: []
#  - {{ path: "/var/log/pgsql", mode: 0744 }} # Log directory
#  - {{ path: "/var/lib/pgsql/{{ pg_major_version }}/wal_archive", mode: 0744 }} # WAL archive directory

# Make ${PGDATA}/pg_stat_tmp a RAM-disk (false/true) with defined size
pg_stat_tmp_on_ram_disk: false
pg_stat_tmp_ram_size: "128m"

# PostgreSQL port
pg_port: 5432

# PostgreSQL service
pg_service: postgresql-{{ pg_major_version }}
pg_service_enabled: true

# Set postgresql state when configuration changes are made. Recommended values:
# 'restarted' or 'reloaded'
pg_restarted_state: restarted

# Profile filename
pg_profile_filename: .pgsql_profile

# PostgreSQL environment variables
pg_env_vars:
  - "PATH=/usr/pgsql-{{ pg_major_version }}/bin:$PATH"
  - "LD_LIBRARY_PATH=/usr/pgsql-{{ pg_major_version }}/lib:$LD_LIBRARY_PATH"
  - "PGLOCALEDIR=/usr/pgsql-{{ pg_major_version }}/share/locale"
  - "PGDATA={{ pg_data_dir }}"

# Configure parameters for cluster initialization
pg_initdb_params: "-k -E UTF8 --locale=en_US.UTF-8"

# Host based authentication (hba) entries to be added to the pg_hba.conf; this
# variable's defaults reflect the defaults that come with a fresh installation
pg_hba_entries:
  - {type: local, database: all, user: all, address: null, auth_method: peer, state: present}
  - {type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: md5, state: present}
  - {type: host, database: all, user: all, address: '::1/128', auth_method: md5, state: present}
  - {type: local, database: replication, user: all, address: null, auth_method: peer, state: present}
  - {type: host, database: replication, user: all, address: '127.0.0.1/32', auth_method: md5, state: present}
  - {type: host, database: replication, user: all, address: '::1/128', auth_method: md5, state: present}

# Global postgresql configuration, similar to pg_postgresql_conf_params, but these need to
# be applied first, and then stick related into pg_postgresql_conf_params, for example, to
# configure pg_stat_statements, load it here first and then set pg_stat_statements.track
pg_postgresql_pre_conf_params:
  - { name: "unix_socket_directories", value: "{{ pg_unix_socket_directories | join(',') }}" }

# Global configuration options that will be set via ALTER SYSTEM in postgresql.auto.conf
pg_postgresql_conf_params: []
# - { name: "pg_stat_statements.track", value: "all" }

# Add users to cluster
pg_users: []
# - name: jdoe # required; the rest are optional
#   password: # defaults to not set
#   encrypted: # defaults to not set
#   role_attr_flags: # defaults to not set
#   db: # defaults to not set
#   login_host: # defaults to 'localhost'
#   login_password: # defaults to not set
#   login_user: # defaults to '{{ pg_user }}'
#   port: # defaults to not set
#   state: # defaults to 'present'
#
# - name: replicator # Role for streaming replication
#   password: replicator_password
#   role_attr_flags: LOGIN,REPLICATION
#   db: postgres
#   login_user: "{{ pg_user }}""
#   state: present

# Add databases to cluster
pg_databases: []
# - name: exampledb # required; the rest are optional
#   lc_collate: # defaults to 'en_US.UTF-8'
#   lc_ctype: # defaults to 'en_US.UTF-8'
#   encoding: # defaults to 'UTF-8'
#   template: # defaults to 'template0'
#   login_host: # defaults to 'localhost'
#   login_password: # defaults to not set
#   login_user: # defaults to '{{ pg_user }}'
#   port: # defaults to not set
#   owner: # defaults to '{{ pg_user
#   state: # defaults to 'present'

# Add extensions to databases
pg_extensions: []
#  - name: pg_stat_statements # required
#    version: # defaults to 'latest'
#    db: postgres # required
#    schema: # defaults to not set
#    cascade: # defaults to 'no'
#    login_host: # defaults to 'localhost'
#    login_password: # defaults to not set
#    login_user: # defaults to '{{ pg_user }}'
#    port: # defaults to not set
#    state: present # defaults to 'present'

# Add existing roles of db cluster to .pgpass file; password taken from pg_shadow
pg_pass_roles: []
#  - name: replicator
#    hostname: "*"
#    port: "{{ pg_port }}"
#    database: replication
